/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package subForm;

import connector.MySqlCon;
import data.Data;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Afif Bahtiar
 */
public class inputPengembalian extends javax.swing.JPanel {

    /**
     * Creates new form inputPeminjaman
     */
    private String[] listBuku = new String[30];
    private int index = 0;
    private String tanggalPinjam = "";

    Calendar cal = Calendar.getInstance();
    SimpleDateFormat tgl = new SimpleDateFormat("dd-MM-yyyy");
    String Tanggal = tgl.format(cal.getTime());

    Calendar calendar = Calendar.getInstance();
    SimpleDateFormat tanggal = new SimpleDateFormat("yyyy-MM-dd");
    String today = tanggal.format(calendar.getTime());

    public inputPengembalian() {
        initComponents();
        todayDate.setText(Tanggal);
    }

    private String getPengembalianDate(String date, int day) {

        String pengembalianDate = "";
        try {

            SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
            Calendar todayDate = Calendar.getInstance();
            todayDate.setTime(format.parse(date));
            todayDate.add(Calendar.DATE, day);
            pengembalianDate = format.format(todayDate.getTime());

        } catch (ParseException ex) {
            Logger.getLogger(inputPeminjaman.class.getName()).log(Level.SEVERE, null, ex);
        }

        return pengembalianDate;
    }

    private String formatPengembalianDate(String date, int day) {

        String pengembalianDate = "";
        try {

            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            Calendar todayDate = Calendar.getInstance();
            todayDate.setTime(format.parse(date));
            todayDate.add(Calendar.DATE, day);
            pengembalianDate = format.format(todayDate.getTime());

        } catch (ParseException ex) {
            Logger.getLogger(inputPeminjaman.class.getName()).log(Level.SEVERE, null, ex);
        }

        return pengembalianDate;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        todayDate = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        idPeminjamanTf = new javax.swing.JTextField();
        prosesBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listTa = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pengembalianDate = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        limitDate = new javax.swing.JLabel();
        submitBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listTrans = new javax.swing.JTextArea();

        setName("Input Peminjaman"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1311, 559));

        jLabel1.setText("Server Date :");

        todayDate.setText("Today_date");

        jLabel3.setText("Masukkan nomor induk siswa      :");

        prosesBtn.setText("Proses");
        prosesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prosesBtnActionPerformed(evt);
            }
        });

        listTa.setColumns(20);
        listTa.setRows(5);
        jScrollPane1.setViewportView(listTa);
        listTa.setEditable(false);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Daftar buku yang dipinjam siswa");

        jLabel5.setText("Tanggal Pengembalian   :");

        pengembalianDate.setText("-");

        jLabel7.setText("Batas Pengembalian       :");

        limitDate.setText("-");

        submitBtn.setText("Submit");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        listTrans.setColumns(20);
        listTrans.setRows(5);
        listTrans.setEditable(false);
        listTrans.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listTransMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listTrans);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(todayDate))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(211, 211, 211)
                                .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(limitDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(pengembalianDate, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(idPeminjamanTf, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(prosesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(538, 538, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(todayDate))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(idPeminjamanTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prosesBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(pengembalianDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(limitDate))
                .addGap(33, 33, 33)
                .addComponent(submitBtn)
                .addGap(61, 61, 61))
        );

        submitBtn.setEnabled(false);
    }// </editor-fold>//GEN-END:initComponents

    private void prosesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prosesBtnActionPerformed
        // TODO add your handling code here:
        listTrans.setText("");
        /*String query = "select * from transaksi_pinjam where id_peminjaman = '" + idPeminjamanTf.getText() + "'";

        try {
            Statement st = MySqlCon.getConnection().createStatement();
            ResultSet rs = st.executeQuery(query);

            if (rs.next()) {

                String tanggalKembali = rs.getString("tgl_kembali");

                tanggalPinjam = rs.getString("tgl_pinjam");
                pengembalianDate.setText(rs.getString("tgl_kembali"));
                limitDate.setText(rs.getString("batas_pengembalian"));

                String listBukuQuery = "select melibatkan.kode_buku, data_buku.nama_buku from melibatkan join data_buku on melibatkan.kode_buku=data_buku.kode_buku WHERE melibatkan.id_peminjaman = '" + idPeminjamanTf.getText() + "'";
                try {
                    ResultSet resultset = st.executeQuery(listBukuQuery);

                    while (resultset.next()) {
                        listBuku[index] = resultset.getString("kode_buku");
                        String nama_buku = resultset.getString("nama_buku");
                        listTa.append(nama_buku + "\n");
                        index++;
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error disini : " + e);
                }

                submitBtn.setEnabled(true);

            } else {
                JOptionPane.showMessageDialog(this, "Id peminjaman yang anda masukkan tidak ditemukan!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Query salah, detail error : " + e);
        }*/
        String cari = "select id_peminjaman from transaksi_pinjam where no_induk = '" + idPeminjamanTf.getText() + "'";
        try {
            Statement st = MySqlCon.getConnection().createStatement();
            ResultSet resultset = st.executeQuery(cari);

            while (resultset.next()) {
                String id_trans = resultset.getString("id_peminjaman");
                listTrans.append(id_trans + "\n");
            }

            idPeminjamanTf.setText("");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error disini : " + e);
        }

    }//GEN-LAST:event_prosesBtnActionPerformed

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        // TODO add your handling code here:

        int denda = 0;

        try {
            DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            Date tanggalpinjam = format.parse(pengembalianDate.getText());
            Date tanggalkembali = format.parse(today);
            Date tanggalbatas = format.parse(limitDate.getText());

            long tanggalpinjam1 = tanggalpinjam.getTime() / (24 * 60 * 60 * 1000);
            long tanggalkembali1 = tanggalkembali.getTime() / (24 * 60 * 60 * 1000);
            long tanggalbatas1 = tanggalbatas.getTime() / (24 * 60 * 60 * 1000);

            long diff = tanggalkembali1 - tanggalpinjam1;
            long difflimit = tanggalkembali1 - tanggalbatas1;
            long lama = diff / (24 * 60 * 60 * 1000);
            long lamaBatas = difflimit / (24 * 60 * 60 * 1000);

            if (tanggalkembali1 <= tanggalpinjam1) {
                JOptionPane.showMessageDialog(this, tanggalpinjam1 + " " + tanggalkembali1 + " " + tanggalbatas1 + " Aman");
            } else if (tanggalkembali1 > tanggalbatas1) {
                denda = 2000 * ((int) tanggalkembali1 - (int) tanggalbatas1);
                JOptionPane.showMessageDialog(this, "Dikarenakan terlambat " + difflimit + " hari, maka Anda harus \nmembayar denda Rp." + denda);
            } else if (tanggalkembali1 == tanggalbatas1) {
                denda = 1000;
                JOptionPane.showMessageDialog(this, "Anda didenda Rp." + denda);
            } else {
                JOptionPane.showMessageDialog(this, "wow kok bisa??");
            }

        } catch (Exception e) {
            System.out.println("" + e.getMessage());
        }

        String date = today.replace("-", "");
        String idTrans = date + "-" + idPeminjamanTf.getText() + "-" + Data.getUserId();
        String query = "insert into transaksi_pengembalian values('" + idTrans + "','" + idPeminjamanTf.getText() + "','" + Data.getUserId() + "','" + today + "','" + denda + "')";
        try {
            MySqlCon.ExecuteQuery(query, "Data pengembalian berhasil dimasukkan");
            idPeminjamanTf.setText("");
            listTa.setText("");
            submitBtn.setEnabled(false);
        } catch (Exception ex) {
            Logger.getLogger(inputPengembalian.class.getName()).log(Level.SEVERE, null, ex);
        }

        String updateSql;
        for (int i = 0; i < index; i++) {
            updateSql = "update data_buku set keterangan= 'Tersedia' where kode_buku = '" + listBuku[i] + "'";
            try {
                MySqlCon.ExecuteQuery(updateSql, "Data buku telah diubah");
            } catch (Exception ex) {
                Logger.getLogger(inputPeminjaman.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        index = 0;
        listBuku = new String[30];
        denda = 0;
    }//GEN-LAST:event_submitBtnActionPerformed

    private void listTransMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listTransMouseClicked

        String text = null;
        try {
            // TODO add your handling code here:
            int line = listTrans.getLineOfOffset(listTrans.getCaretPosition());
            int start = listTrans.getLineStartOffset(line);
            int end = listTrans.getLineEndOffset(line);
            text = listTrans.getDocument().getText(start, end - start);
            text = text.replace("\n", "").replace("\r", "");
            JOptionPane.showMessageDialog(this, "value is : " + text);

            String query = "select * from transaksi_pinjam where id_peminjaman = '" + text + "'";

            try {
                Statement st = MySqlCon.getConnection().createStatement();
                ResultSet rs = st.executeQuery(query);

                if (rs.next()) {

                    String tanggalKembali = rs.getString("tgl_kembali");

                    tanggalPinjam = rs.getString("tgl_pinjam");
                    pengembalianDate.setText(rs.getString("tgl_kembali"));
                    limitDate.setText(rs.getString("batas_pengembalian"));

                    String listBukuQuery = "select melibatkan.kode_buku, data_buku.nama_buku from melibatkan join data_buku on melibatkan.kode_buku=data_buku.kode_buku WHERE melibatkan.id_peminjaman = '" + text + "'";
                    try {
                        ResultSet resultset = st.executeQuery(listBukuQuery);

                        while (resultset.next()) {
                            listBuku[index] = resultset.getString("kode_buku");
                            String nama_buku = resultset.getString("nama_buku");
                            listTa.append(nama_buku + "\n");
                            index++;
                        }
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Error disini : " + e);
                    }

                    submitBtn.setEnabled(true);

                } else {
                    JOptionPane.showMessageDialog(this, "Id peminjaman yang anda masukkan tidak ditemukan!");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Query salah, detail error : " + e);
            }

        } catch (BadLocationException ex) {
            Logger.getLogger(inputPengembalian.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_listTransMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField idPeminjamanTf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel limitDate;
    private javax.swing.JTextArea listTa;
    private javax.swing.JTextArea listTrans;
    private javax.swing.JLabel pengembalianDate;
    private javax.swing.JButton prosesBtn;
    private javax.swing.JButton submitBtn;
    private javax.swing.JLabel todayDate;
    // End of variables declaration//GEN-END:variables
}
